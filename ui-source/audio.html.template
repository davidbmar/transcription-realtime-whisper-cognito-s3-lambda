<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audio Recorder - CloudDrive</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <link rel="stylesheet" href="audio-ui-styles.css">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="root"></div>
    <div id="debug-log" class="debug-log collapsed"></div>
    <div id="test-panel" class="test-panel collapsed">
        <div class="panel-header" onclick="toggleTestPanel()">
            <h4>Test Panel</h4>
            <span class="toggle-btn">‚ñº</span>
        </div>
        <div class="panel-content">
            <button onclick="window.testRecord()">üé§ Test Record 10s</button><br>
            <button onclick="window.testPlayback()">‚ñ∂Ô∏è Test Playback</button><br>
            <button onclick="window.clearDebug()">üóëÔ∏è Clear Debug</button><br>
            <button onclick="window.exportLogs()">üìã Copy Logs</button><br>
            <button onclick="toggleDebugLog()">üëÅÔ∏è Toggle Debug Log</button><br>
            <small>Authenticated Audio</small>
        </div>
    </div>

    <script type="text/babel">
        const { useState, useEffect, useRef } = React;

        // Configuration - to be updated after deployment
        const config = {
            userPoolId: 'YOUR_USER_POOL_ID',
            userPoolClientId: 'YOUR_USER_POOL_CLIENT_ID',
            identityPoolId: 'YOUR_IDENTITY_POOL_ID',
            region: 'YOUR_REGION',
            apiUrl: 'YOUR_CLOUDFRONT_API_ENDPOINT',
            audioApiUrl: 'YOUR_AUDIO_API_ENDPOINT',
            appUrl: 'YOUR_CLOUDFRONT_URL'
        };

        // Debug logging
        window.debugLogs = [];
        const log = (message) => {
            console.log(message);
            const timestamp = new Date().toLocaleTimeString();
            const logMessage = `${timestamp}: ${message}`;
            window.debugLogs.push(logMessage);
            
            const debugElement = document.getElementById('debug-log');
            if (debugElement) {
                debugElement.innerHTML += `<div>${logMessage}</div>`;
                debugElement.scrollTop = debugElement.scrollHeight;
            }
        };

        // Panel toggle functions
        window.toggleTestPanel = () => {
            const panel = document.getElementById('test-panel');
            const toggleBtn = panel.querySelector('.toggle-btn');
            
            if (panel.classList.contains('collapsed')) {
                panel.classList.remove('collapsed');
                toggleBtn.textContent = '‚ñ≤';
            } else {
                panel.classList.add('collapsed');
                toggleBtn.textContent = '‚ñº';
            }
        };

        window.toggleDebugLog = () => {
            const debugLog = document.getElementById('debug-log');
            
            if (debugLog.classList.contains('collapsed')) {
                debugLog.classList.remove('collapsed');
            } else {
                debugLog.classList.add('collapsed');
            }
        };

        // Test functions
        window.clearDebug = () => {
            document.getElementById('debug-log').innerHTML = '';
            window.debugLogs = [];
        };

        window.exportLogs = () => {
            const logs = window.debugLogs.join('\n');
            navigator.clipboard.writeText(logs).then(() => {
                alert('Debug logs copied to clipboard!');
            });
        };

        // Authentication helper functions
        const getAuthToken = () => {
            return localStorage.getItem('id_token');
        };

        const getUserFromToken = () => {
            const token = getAuthToken();
            if (!token) return null;
            
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                return {
                    email: payload.email,
                    userId: payload.sub,
                    name: payload.given_name || payload.email
                };
            } catch (error) {
                log('Error parsing token: ' + error.message);
                return null;
            }
        };

        const makeAuthenticatedRequest = async (url, options = {}) => {
            const token = getAuthToken();
            if (!token) {
                throw new Error('No authentication token found');
            }

            const headers = {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                ...options.headers
            };

            const response = await fetch(url, {
                ...options,
                headers
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            return response.json();
        };

        // Icons (same as original)
        const MicIcon = ({size = 24}) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"/>
                <path d="M19 10v2a7 7 0 0 1-14 0v-2"/>
                <line x1="12" y1="19" x2="12" y2="23"/>
                <line x1="8" y1="23" x2="16" y2="23"/>
            </svg>
        );

        const SquareIcon = ({size = 24}) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="currentColor">
                <rect x="6" y="6" width="12" height="12" rx="2"/>
            </svg>
        );

        const PlayIcon = ({size = 14}) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="currentColor">
                <polygon points="5,3 19,12 5,21"/>
            </svg>
        );

        const PauseIcon = ({size = 14}) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="currentColor">
                <rect x="6" y="4" width="4" height="16"/>
                <rect x="14" y="4" width="4" height="16"/>
            </svg>
        );

        const CheckIcon = ({size = 14}) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <polyline points="20,6 9,17 4,12"/>
            </svg>
        );

        const EditIcon = ({size = 14}) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
            </svg>
        );

        const TrashIcon = ({size = 14}) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <polyline points="3,6 5,6 21,6"/>
                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
            </svg>
        );

        const CloudIcon = ({size = 14}) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"/>
            </svg>
        );

        function AudioRecorderApp() {
            const [user, setUser] = useState(null);
            const [isRecording, setIsRecording] = useState(false);
            const [currentTime, setCurrentTime] = useState(0);
            const [chunkDuration, setChunkDuration] = useState(5);
            const [theme, setTheme] = useState('default');
            const [uploadStatus, setUploadStatus] = useState({});
            const [sessions, setSessions] = useState([]);
            
            // Audio recording state
            const mediaRecorderRef = useRef(null);
            const streamRef = useRef(null);
            const audioElementRef = useRef(null);
            const sessionStartRef = useRef(null);
            const currentChunkRef = useRef(0);
            const recordingSessionRef = useRef(null);
            const sessionIdRef = useRef(null);
            const chunksQueueRef = useRef([]);
            
            const [recordings, setRecordings] = useState([]);
            const [playingId, setPlayingId] = useState(null);

            // Check authentication on mount
            useEffect(() => {
                const currentUser = getUserFromToken();
                if (!currentUser) {
                    // Redirect to login
                    window.location.href = '/';
                    return;
                }
                
                setUser(currentUser);
                log(`Audio recorder initialized for user: ${currentUser.email}`);
                
                // Load previous sessions
                loadSessions();
            }, []);

            // Load user's audio sessions
            const loadSessions = async () => {
                try {
                    const response = await makeAuthenticatedRequest(`${config.audioApiUrl}/sessions`);
                    setSessions(response.sessions || []);
                    log(`Loaded ${response.sessions?.length || 0} audio sessions`);
                } catch (error) {
                    log(`Error loading sessions: ${error.message}`);
                }
            };

            // Generate session ID
            const generateSessionId = () => {
                const timestamp = Date.now();
                const random = Math.random().toString(36).substring(2, 8);
                return `session-${timestamp}-${random}`;
            };

            // Upload chunk to S3
            const uploadChunk = async (chunkBlob, chunkNumber) => {
                try {
                    log(`Uploading chunk ${chunkNumber} (${chunkBlob.size} bytes)`);
                    
                    // Get pre-signed URL
                    const uploadRequest = await makeAuthenticatedRequest(`${config.audioApiUrl}/upload-chunk`, {
                        method: 'POST',
                        body: JSON.stringify({
                            sessionId: sessionIdRef.current,
                            chunkNumber: chunkNumber,
                            contentType: 'audio/webm',
                            duration: chunkDuration
                        })
                    });

                    // Upload to S3
                    const uploadResponse = await fetch(uploadRequest.uploadUrl, {
                        method: 'PUT',
                        body: chunkBlob,
                        headers: {
                            'Content-Type': 'audio/webm'
                        }
                    });

                    if (!uploadResponse.ok) {
                        throw new Error(`Upload failed: ${uploadResponse.status}`);
                    }

                    // Update upload status
                    setUploadStatus(prev => ({
                        ...prev,
                        [chunkNumber]: 'uploaded'
                    }));

                    log(`Chunk ${chunkNumber} uploaded successfully`);
                    return true;
                } catch (error) {
                    log(`Error uploading chunk ${chunkNumber}: ${error.message}`);
                    setUploadStatus(prev => ({
                        ...prev,
                        [chunkNumber]: 'failed'
                    }));
                    return false;
                }
            };

            // Update session metadata
            const updateSessionMetadata = async (metadata) => {
                try {
                    await makeAuthenticatedRequest(`${config.audioApiUrl}/session-metadata`, {
                        method: 'POST',
                        body: JSON.stringify({
                            sessionId: sessionIdRef.current,
                            metadata: metadata
                        })
                    });
                    log('Session metadata updated');
                } catch (error) {
                    log(`Error updating metadata: ${error.message}`);
                }
            };

            // Timer effect
            useEffect(() => {
                let interval;
                if (isRecording) {
                    interval = setInterval(() => {
                        setCurrentTime(prev => {
                            const newTime = prev + 1;
                            
                            // Check if we need to create a new chunk
                            if (newTime > 0 && newTime % chunkDuration === 0) {
                                log(`Chunk ${currentChunkRef.current + 1} completed at ${newTime}s`);
                                createChunkFromCurrentRecording();
                            }
                            
                            return newTime;
                        });
                    }, 1000);
                }
                return () => clearInterval(interval);
            }, [isRecording, chunkDuration]);

            const formatTime = (seconds) => {
                const mins = Math.floor(seconds / 60);
                const secs = seconds % 60;
                return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
            };

            const createChunkFromCurrentRecording = async () => {
                if (!mediaRecorderRef.current || mediaRecorderRef.current.state !== 'recording') {
                    log("ERROR: Cannot create chunk - MediaRecorder not recording");
                    return;
                }

                try {
                    const chunks = [];
                    const oldRecorder = mediaRecorderRef.current;
                    
                    const chunkPromise = new Promise((resolve) => {
                        oldRecorder.ondataavailable = (event) => {
                            if (event.data.size > 0) {
                                chunks.push(event.data);
                            }
                        };
                        
                        oldRecorder.onstop = () => {
                            if (chunks.length > 0) {
                                const audioBlob = new Blob(chunks, { type: 'audio/webm;codecs=opus' });
                                resolve(audioBlob);
                            } else {
                                resolve(null);
                            }
                        };
                    });

                    oldRecorder.stop();
                    const audioBlob = await chunkPromise;
                    
                    if (audioBlob) {
                        const chunkNumber = currentChunkRef.current + 1;
                        currentChunkRef.current = chunkNumber;
                        
                        // Add to local recordings for playback
                        const audioUrl = URL.createObjectURL(audioBlob);
                        const newRecording = {
                            id: `${sessionIdRef.current}-chunk-${chunkNumber}`,
                            name: `${sessionIdRef.current} (Chunk ${chunkNumber})`,
                            duration: chunkDuration,
                            size: Number((audioBlob.size / (1024 * 1024)).toFixed(2)),
                            timestamp: new Date(),
                            chunkNumber: chunkNumber,
                            sessionId: sessionIdRef.current,
                            syncStatus: "uploading",
                            audioBlob,
                            audioUrl
                        };
                        
                        setRecordings(prev => [newRecording, ...prev]);
                        
                        // Upload chunk in background
                        setUploadStatus(prev => ({
                            ...prev,
                            [chunkNumber]: 'uploading'
                        }));
                        
                        uploadChunk(audioBlob, chunkNumber).then(success => {
                            if (success) {
                                setRecordings(prev => prev.map(r => 
                                    r.id === newRecording.id 
                                        ? { ...r, syncStatus: 'synced' }
                                        : r
                                ));
                            } else {
                                setRecordings(prev => prev.map(r => 
                                    r.id === newRecording.id 
                                        ? { ...r, syncStatus: 'failed' }
                                        : r
                                ));
                            }
                        });
                    }

                    // Start a new recorder if still recording
                    if (streamRef.current && isRecording) {
                        await startNewChunkRecording();
                    }

                } catch (error) {
                    log(`ERROR creating chunk: ${error.message}`);
                }
            };

            const startNewChunkRecording = async () => {
                try {
                    const mimeTypes = [
                        'audio/webm;codecs=opus',
                        'audio/webm',
                        'audio/mp4',
                        'audio/ogg;codecs=opus',
                        'audio/wav'
                    ];
                    
                    let selectedMimeType = '';
                    for (const mimeType of mimeTypes) {
                        if (MediaRecorder.isTypeSupported(mimeType)) {
                            selectedMimeType = mimeType;
                            break;
                        }
                    }
                    
                    const options = selectedMimeType ? { mimeType: selectedMimeType } : {};
                    const mediaRecorder = new MediaRecorder(streamRef.current, options);
                    
                    mediaRecorderRef.current = mediaRecorder;
                    
                    mediaRecorder.onerror = (event) => {
                        log(`MediaRecorder error: ${event.error}`);
                    };
                    
                    mediaRecorder.start();
                    log("New chunk recording started");
                    
                } catch (error) {
                    log(`ERROR starting new chunk: ${error.message}`);
                }
            };

            const initializeRecording = async () => {
                try {
                    log("Requesting microphone access...");
                    const stream = await navigator.mediaDevices.getUserMedia({ 
                        audio: {
                            echoCancellation: true,
                            noiseSuppression: true,
                            autoGainControl: true
                        } 
                    });
                    
                    streamRef.current = stream;
                    sessionIdRef.current = generateSessionId();
                    sessionStartRef.current = Date.now();
                    currentChunkRef.current = 0;
                    
                    // Create initial session metadata
                    await updateSessionMetadata({
                        status: 'recording',
                        chunkDuration: chunkDuration,
                        createdAt: new Date().toISOString(),
                        conversationContext: 'Voice recording session'
                    });
                    
                    await startNewChunkRecording();
                    log(`Recording session ${sessionIdRef.current} initialized`);
                    return true;
                    
                } catch (error) {
                    log(`ERROR: Failed to initialize recording: ${error.message}`);
                    alert(`Microphone access failed: ${error.message}`);
                    return false;
                }
            };

            const handleRecord = async () => {
                if (isRecording) {
                    log("Stopping recording...");
                    
                    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
                        await createChunkFromCurrentRecording();
                    }
                    
                    if (streamRef.current) {
                        streamRef.current.getTracks().forEach(track => {
                            track.stop();
                        });
                    }
                    
                    // Update final session metadata
                    await updateSessionMetadata({
                        status: 'completed',
                        duration: currentTime,
                        chunkCount: currentChunkRef.current,
                        completedAt: new Date().toISOString()
                    });
                    
                    setIsRecording(false);
                    setCurrentTime(0);
                    currentChunkRef.current = 0;
                    
                    // Reload sessions
                    loadSessions();
                    
                } else {
                    log("Starting recording...");
                    const initialized = await initializeRecording();
                    if (initialized) {
                        setIsRecording(true);
                        setCurrentTime(0);
                        setUploadStatus({});
                    }
                }
            };

            const handlePlay = (id) => {
                const recording = recordings.find(r => r.id === id);
                if (!recording?.audioUrl) return;
                
                if (playingId === id) {
                    if (audioElementRef.current) {
                        audioElementRef.current.pause();
                        audioElementRef.current = null;
                    }
                    setPlayingId(null);
                } else {
                    if (audioElementRef.current) {
                        audioElementRef.current.pause();
                    }
                    
                    const audio = new Audio(recording.audioUrl);
                    audioElementRef.current = audio;
                    
                    audio.onended = () => {
                        setPlayingId(null);
                        audioElementRef.current = null;
                    };
                    
                    audio.play().then(() => {
                        setPlayingId(id);
                    }).catch(error => {
                        log(`Audio playback failed: ${error.message}`);
                        setPlayingId(null);
                    });
                }
            };

            const handleDelete = async (id) => {
                const recording = recordings.find(r => r.id === id);
                if (!recording) return;

                try {
                    log(`Deleting chunk ${recording.chunkNumber} from S3...`);

                    // Call delete API
                    await makeAuthenticatedRequest(`${config.audioApiUrl}/delete-chunk`, {
                        method: 'DELETE',
                        body: JSON.stringify({
                            sessionId: recording.sessionId,
                            chunkNumber: recording.chunkNumber
                        })
                    });

                    log(`Chunk ${recording.chunkNumber} deleted successfully from S3`);

                    // Clean up local resources
                    if (recording?.audioUrl) {
                        URL.revokeObjectURL(recording.audioUrl);
                    }

                    if (playingId === id) {
                        if (audioElementRef.current) {
                            audioElementRef.current.pause();
                            audioElementRef.current = null;
                        }
                        setPlayingId(null);
                    }

                    // Remove from local state
                    setRecordings(prev => prev.filter(r => r.id !== id));
                } catch (error) {
                    log(`Error deleting chunk: ${error.message}`);
                    alert(`Failed to delete: ${error.message}`);
                }
            };

            const getSyncStatusIcon = (syncStatus) => {
                switch (syncStatus) {
                    case 'synced': return <CheckIcon />;
                    case 'uploading': return <CloudIcon />;
                    case 'failed': return '‚ùå';
                    default: return '‚è≥';
                }
            };

            const getSyncStatusColor = (syncStatus) => {
                switch (syncStatus) {
                    case 'synced': return '#22c55e';
                    case 'uploading': return '#3b82f6';
                    case 'failed': return '#ef4444';
                    default: return '#6b7280';
                }
            };

            const themeClass = theme === 'default' ? '' : theme === 'dark' ? 'dark' : `theme-${theme}`;
            const currentChunkTime = currentTime % chunkDuration;
            const currentChunkNumber = Math.floor(currentTime / chunkDuration) + 1;

            if (!user) {
                return (
                    <div className="min-h-screen flex items-center justify-center">
                        <div className="text-center">
                            <h1>Loading...</h1>
                            <p>Checking authentication...</p>
                        </div>
                    </div>
                );
            }

            return (
                <div className={`min-h-screen ${themeClass}`}>
                    {/* Status Bar */}
                    <div className="flex items-center justify-between p-4" style={{backgroundColor: 'hsl(var(--muted))'}}>
                        <div className="flex items-center gap-2">
                            <span style={{color: '#22c55e'}}>‚óè</span>
                            <span style={{fontSize: '14px', color: '#22c55e'}}>Online</span>
                            <span style={{fontSize: '14px', marginLeft: '16px'}}>
                                {user.email}
                            </span>
                        </div>
                        <div className="flex items-center gap-4">
                            <div style={{fontSize: '14px'}}>
                                {sessions.length} sessions
                            </div>
                            <a href="/" className="btn btn-outline" style={{fontSize: '12px', padding: '4px 8px'}}>
                                ‚Üê Back to Files
                            </a>
                        </div>
                    </div>

                    <div className="container">
                        <div className="grid grid-cols-2 gap-4 p-3">
                            {/* Recording Controls - Compact */}
                            <div className="card p-3">
                                <div className="flex items-center gap-2 mb-3">
                                    <MicIcon size={16} />
                                    <h2 className="text-base font-bold">Audio Recorder</h2>
                                </div>
                                
                                <div className="flex items-center gap-3 mb-3">
                                    <button
                                        className={`btn btn-lg ${isRecording ? 'btn-destructive animate-pulse' : 'btn-primary'}`}
                                        onClick={handleRecord}
                                        style={{width: '60px', height: '60px'}}
                                    >
                                        {isRecording ? <SquareIcon size={20} /> : <MicIcon size={20} />}
                                    </button>
                                    
                                    <div className="flex-1">
                                        <div className="text-lg font-mono font-bold">
                                            {formatTime(currentChunkTime)} / {formatTime(chunkDuration)}
                                        </div>
                                        <div className="text-muted text-sm">
                                            {isRecording ? `Chunk ${currentChunkNumber}` : "Ready"}
                                        </div>
                                        {isRecording && (
                                            <div className="text-muted text-xs">
                                                Total: {formatTime(currentTime)} ‚Ä¢ {currentChunkRef.current} uploaded
                                            </div>
                                        )}
                                    </div>
                                </div>

                                <div className="space-y-2">
                                    <div className="flex items-center justify-between text-sm">
                                        <span>Duration</span>
                                        <span className="badge text-xs">{chunkDuration}s</span>
                                    </div>
                                    <input
                                        type="range"
                                        className="slider"
                                        min="5"
                                        max="300"
                                        step="5"
                                        value={chunkDuration}
                                        onChange={(e) => setChunkDuration(parseInt(e.target.value))}
                                        disabled={isRecording}
                                        style={{'--value': `${((chunkDuration - 5) / (300 - 5)) * 100}%`}}
                                    />
                                    <div className="flex justify-between text-muted text-xs">
                                        <span>5s</span>
                                        <span>5min</span>
                                    </div>
                                </div>
                            </div>

                            {/* Recordings List - Compact */}
                            <div className="card p-3">
                                <div className="flex items-center justify-between mb-3">
                                    <div className="flex items-center gap-2">
                                        <span style={{fontSize: '14px'}}>üéµ</span>
                                        <h2 className="text-base font-bold">Session</h2>
                                        <span className="badge text-xs">({recordings.length})</span>
                                    </div>
                                    
                                    <select 
                                        className="select" 
                                        value={theme} 
                                        onChange={(e) => setTheme(e.target.value)}
                                        style={{width: 'auto', fontSize: '11px', padding: '3px 6px'}}
                                    >
                                        <option value="default">Gray</option>
                                        <option value="dark">Dark</option>
                                        <option value="purple">Purple</option>
                                        <option value="green">Green</option>
                                        <option value="blue">Blue</option>
                                    </select>
                                </div>
                                
                                <div className="space-y-1">
                                    {recordings.map((recording) => (
                                        <div key={recording.id} className="recording-item">
                                            <div className="recording-col-left">
                                                <div className="recording-name">{recording.name}</div>
                                                <div className="recording-date">
                                                    {recording.timestamp.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                                                </div>
                                            </div>
                                            
                                            <div className="recording-col-right">
                                                <div className="recording-metadata">
                                                    <span style={{color: getSyncStatusColor(recording.syncStatus)}}>
                                                        {getSyncStatusIcon(recording.syncStatus)}
                                                    </span>
                                                    <span>{recording.duration}s ‚Ä¢ {(recording.size * 1000).toFixed(0)}KB</span>
                                                </div>
                                                <div className="recording-actions">
                                                    <button
                                                        className="btn btn-outline icon-btn"
                                                        onClick={() => handlePlay(recording.id)}
                                                    >
                                                        {playingId === recording.id ? <PauseIcon /> : <PlayIcon />}
                                                    </button>
                                                    <button 
                                                        className="btn btn-outline icon-btn"
                                                        onClick={() => handleDelete(recording.id)}
                                                    >
                                                        <TrashIcon />
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            );
        }

        // Initialize when page loads - try multiple approaches
        function initializeApp() {
            console.log('Initializing AudioRecorderApp...');
            console.log('React available:', typeof React !== 'undefined');
            console.log('ReactDOM available:', typeof ReactDOM !== 'undefined');
            console.log('AudioRecorderApp available:', typeof AudioRecorderApp !== 'undefined');
            console.log('Root element exists:', !!document.getElementById('root'));
            
            if (typeof React !== 'undefined' && typeof ReactDOM !== 'undefined' && typeof AudioRecorderApp !== 'undefined') {
                try {
                    ReactDOM.render(React.createElement(AudioRecorderApp), document.getElementById('root'));
                    console.log('AudioRecorderApp rendered successfully');
                } catch (error) {
                    console.error('Error rendering AudioRecorderApp:', error);
                }
            } else {
                console.log('Dependencies not ready, retrying in 500ms...');
                setTimeout(initializeApp, 500);
            }
        }

        // Try multiple initialization approaches
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeApp);
        } else {
            initializeApp();
        }
        
        // Fallback initialization
        setTimeout(initializeApp, 1000);

        // Test functions
        window.testRecord = () => {
            log("TEST: Starting test recording");
            setTimeout(() => {
                const event = new MouseEvent('click', { bubbles: true });
                document.querySelector('.btn-lg').dispatchEvent(event);
            }, 100);
        };

        window.testPlayback = () => {
            log("TEST: Testing playback");
            const playButton = document.querySelector('.btn-outline');
            if (playButton) {
                playButton.click();
            }
        };
    </script>
</body>
</html>